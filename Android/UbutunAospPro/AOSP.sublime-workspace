{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"VR",
				"VRing\t(tuner.fidl)"
			],
			[
				"m_tuner",
				"m_tunerStubReplier"
			],
			[
				"m_VR",
				"m_VRingModelKeyPress"
			],
			[
				"m_vr",
				"m_VRingModelKeyPress"
			],
			[
				"onSt",
				"onStopAutoPause\t(NMTunerSourceListener.cpp)"
			],
			[
				"pla",
				"playStatus"
			],
			[
				"NMMediaMgrSrcPlaySts_",
				"NMMediaMgrSrcPlaySts_SubAudioInst"
			],
			[
				"NC_",
				"NC_TRUE"
			],
			[
				"rea",
				"ready\t(NMTunerStub.cpp)"
			],
			[
				"NC",
				"NC_TRUE"
			],
			[
				"va",
				"value\t(NHMediaHandler.cpp)"
			],
			[
				"pC",
				"pChNo"
			],
			[
				"ret",
				"return"
			],
			[
				"allo",
				"allowSxmPChHighLight"
			],
			[
				"set",
				"setMixPresetPChNo"
			],
			[
				"NMTunerBand_",
				"NMTunerBand_Invalid\t(NMTunerMixPresetListControl.cpp)"
			],
			[
				"UIN",
				"UINT\t(NMTunerStub.cpp)"
			],
			[
				"all",
				"allowSxmPChHighLight"
			],
			[
				"channelN",
				"channelNo\t(NMTunerLibDef.h)"
			],
			[
				"U",
				"UINT"
			],
			[
				"IN",
				"INT"
			],
			[
				"re",
				"ret"
			],
			[
				"NMTunerCmdError_",
				"NMTunerCmdError_Param"
			],
			[
				"mem",
				"memset"
			],
			[
				"de",
				"default"
			],
			[
				"page",
				"pageNo"
			],
			[
				"NMTuner",
				"NMTunerBand_FM"
			],
			[
				"NITunerStatus_",
				"NITunerStatus_BandScan"
			],
			[
				"setMix",
				"setMixPresetSize\t(NMTunerSmartAgentControl.h)"
			],
			[
				"notifyMix",
				"notifyMixPresetCurPChNoUpdate\t(NMTunerStub.cpp)"
			],
			[
				"notifyMixPreset",
				"notifyMixPresetListCurPageUpdate\t(NMTunerMixPresetListControl.cpp)"
			],
			[
				"NMTunerMixPresetList",
				"NMTunerMixPresetListControl_T\t(NMTunerMixPresetListControl_T.cpp)"
			],
			[
				"cl",
				"class"
			],
			[
				"fr",
				"frontSrc"
			],
			[
				"NMTunerCustomTrafficRadioType_",
				"NMTunerCustomTrafficRadioType_UserSetting"
			],
			[
				"NMTunerDirection_",
				"NMTunerDirection_Invalid\t(NMTunerStub.cpp)"
			],
			[
				"NMTunerSwitch_",
				"NMTunerSwitch_On"
			],
			[
				"NMTunerS",
				"NMTunerSwitch\t(NMTunerStub.cpp)"
			],
			[
				"bre",
				"break"
			],
			[
				"di",
				"direction"
			],
			[
				"NMTunerRegion_",
				"NMTunerRegion_NA"
			],
			[
				"save",
				"saveTunerInfo2Meter"
			],
			[
				"m_f",
				"m_frontVoiceStatus"
			],
			[
				"front",
				"m_frontVoiceStatus"
			],
			[
				"em",
				"empty"
			],
			[
				"medi",
				"mediamanager"
			],
			[
				"size",
				"size"
			],
			[
				"e",
				"endif"
			],
			[
				"stat",
				"static"
			],
			[
				"peer",
				"peerVec"
			],
			[
				"UN",
				"UINT32"
			],
			[
				"cmdid",
				"cmdID"
			],
			[
				"NHMediaReqCmdType_",
				"NHMediaReqCmdType_Invalid\t(NHMediaHandlerDef.h)"
			],
			[
				"cmd",
				"cmdId"
			],
			[
				"cas",
				"case"
			],
			[
				"unL",
				"unlistenUri\t(NMTunerContentListener.cpp)"
			],
			[
				"regi",
				"registerUri\t(NMTunerContentListener.h)"
			],
			[
				"c",
				"c_str\t(NMTunerStub.cpp)"
			],
			[
				"NMTunerCon",
				"NMTunerContentListener"
			],
			[
				"en",
				"enableDisPlayStatus\t(NHMediaHandler.h)"
			],
			[
				"dst",
				"dstLA"
			],
			[
				"setB",
				"setBtTelInterrupt\t(NMTunerSourceListener.cpp)"
			],
			[
				"un",
				"unkown\t(NMTunerStub.cpp)"
			],
			[
				"clea",
				"clearRDSMsg"
			],
			[
				"clearRD",
				"clearRDSMsg"
			],
			[
				"str",
				"string"
			],
			[
				"m_rd",
				"m_rdsMsg"
			],
			[
				"data",
				"data"
			],
			[
				"NMtuner",
				"NMTunerInfo\t(NMTunerInfo.h)"
			],
			[
				"NMTunerChinaTraffRadioStatus_",
				"NMTunerChinaTraffRadioStatus_Exited"
			],
			[
				"pl",
				"playinfo"
			],
			[
				"getC",
				"getCurTunerMode"
			],
			[
				"NMTunerMode_",
				"NMTunerMode_trafficRadioMode\t(NMTunerChinaTrafficRadio.cpp)"
			],
			[
				"ex",
				"exitChinaTrafficRadioStatus"
			],
			[
				"m_",
				"m_status"
			],
			[
				"NMTunerStatus_",
				"NMTunerStatus_ManualDown\t(NMTunerStub.cpp)"
			],
			[
				"ge",
				"getCacheRadioSupportStatus\t(NMTunerSourceListener.h)"
			],
			[
				"s",
				"start"
			],
			[
				"sync",
				"syncEnd\t(NCSyncObj.h)"
			],
			[
				"sy",
				"syncStart\t(NCSyncObj.h)"
			],
			[
				"isc",
				"isCacheRadioSupported\t(NMTunerLibIF.h)"
			],
			[
				"ca",
				"case"
			],
			[
				"pos",
				"postRunnable"
			],
			[
				"getRe",
				"getRegionInfo"
			],
			[
				"getP",
				"getPchNo"
			],
			[
				"getS",
				"getStatus"
			],
			[
				"setMx",
				"setCurMixPresetPage"
			],
			[
				"NMTunerSwitch_O",
				"NMTunerSwitch_Off"
			],
			[
				"rep",
				"reinterpret_cast\t(NMTunerEUInfo.cpp)"
			],
			[
				"el",
				"else"
			],
			[
				"NMTunerC",
				"NMTunerChinaTrafficRadio"
			],
			[
				"NM",
				"NMTunerNotify"
			],
			[
				"canc",
				"cancelTA\t(NMTunerStub.cpp)"
			],
			[
				"att",
				"attri\t(NMTunerMixPresetListControl.cpp)"
			],
			[
				"ar",
				"attri\t(NMTunerMixPresetListControl.cpp)"
			],
			[
				"at",
				"attri\t(NMTunerLibDef.h)"
			],
			[
				"ch",
				"chInfo"
			],
			[
				"art",
				"attribute\t(NMSxmServiceLibTypeDef.h)"
			],
			[
				"f",
				"false"
			],
			[
				"is",
				"isValid"
			],
			[
				"cache",
				"cachePlayStatus\t(NMTunerParserDef.h)"
			],
			[
				"NML",
				"NMLOGD"
			],
			[
				"getTuner",
				"getTunerChinaTrafficRadioPtr\t(NMTunerLibIF.h)"
			],
			[
				"eix",
				"exitChinaTrafficRadioStatus\t(NMTunerStub.cpp)"
			],
			[
				"if",
				"if\tIf Condition"
			],
			[
				"in",
				"include"
			],
			[
				"get",
				"getFreq"
			],
			[
				"eve",
				"eventType"
			],
			[
				"han",
				"handleDriverSettingEvent\t(NMTunerEventHandlerListener.cpp)"
			],
			[
				"user",
				"userKey"
			],
			[
				"INT",
				"INT32"
			],
			[
				"upd",
				"updateUser"
			],
			[
				"NMMediaMgrScreenId_",
				"NMMediaMgrScreenId_Rear"
			],
			[
				"no",
				"notify"
			],
			[
				"NITunerChinaTrafficRadioType_",
				"NITunerChinaTrafficRadioType_TrafficStationListType"
			],
			[
				"siz",
				"size\t(NMTunerMixPresetListControl.cpp)"
			],
			[
				"UI",
				"UINT8"
			],
			[
				"has",
				"hasStationListInit\t(NMTunerLib.cpp)"
			],
			[
				"da",
				"data"
			],
			[
				"st",
				"stop"
			],
			[
				"inc",
				"include"
			],
			[
				"res",
				"restart\t(NMRunnableTimer.h)"
			],
			[
				"NMTunerNotifyID_",
				"NMTunerNotifyID_PlayInfoUpdate"
			],
			[
				"NMTunerRdsSingalStatus_",
				"NMTunerRdsSingalStatus_Invalid"
			],
			[
				"stati",
				"static_cast"
			],
			[
				"m_last",
				"m_lastRdsSingalStatus"
			],
			[
				"sta",
				"start\t(NMTunerInfo.h)"
			],
			[
				"m_rds",
				"m_rdsTimer\t(NMTunerInfo.h)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "AOSP/frameworks/av/include/media/IMediaPlayerClient.h",
			"settings":
			{
				"buffer_size": 1426,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/mediaplayer.h",
			"settings":
			{
				"buffer_size": 11804,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IMediaPlayerService.h",
			"settings":
			{
				"buffer_size": 4009,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IMediaPlayer.h",
			"settings":
			{
				"buffer_size": 5583,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/MediaPlayerInterface.h",
			"settings":
			{
				"buffer_size": 11809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h",
			"settings":
			{
				"buffer_size": 17871,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h",
			"settings":
			{
				"buffer_size": 3439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.h",
			"settings":
			{
				"buffer_size": 2647,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/include/TimedEventQueue.h",
			"settings":
			{
				"buffer_size": 4544,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/include/AwesomePlayer.h",
			"settings":
			{
				"buffer_size": 10556,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/MediaExtractor.h",
			"settings":
			{
				"buffer_size": 2297,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/include/MP3Extractor.h",
			"settings":
			{
				"buffer_size": 1656,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/DataSource.h",
			"settings":
			{
				"buffer_size": 6106,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/FileSource.h",
			"settings":
			{
				"buffer_size": 1864,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/include/ID3.h",
			"settings":
			{
				"buffer_size": 2512,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/AudioPlayer.h",
			"settings":
			{
				"buffer_size": 3789,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IOMX.h",
			"settings":
			{
				"buffer_size": 9556,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/include/OMX.h",
			"settings":
			{
				"buffer_size": 5996,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/OMXClient.h",
			"settings":
			{
				"buffer_size": 1022,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/stagefright/OMXCodec.h",
			"settings":
			{
				"buffer_size": 12454,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 38115 files for \"registerFactory_l\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp:\n   43: status_t MediaPlayerFactory::registerFactory_l(IFactory* factory,\n   79:     return registerFactory_l(factory, type);\n  313:     registerFactory_l(new StagefrightPlayerFactory(), STAGEFRIGHT_PLAYER);\n  314:     registerFactory_l(new NuPlayerFactory(), NU_PLAYER);\n  315:     registerFactory_l(new TestPlayerFactory(), TEST_PLAYER);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h:\n   79:     static status_t registerFactory_l(IFactory* factory,\n\n\n\nSearching 38115 files for \"registerFactory\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp:\n   76: status_t MediaPlayerFactory::registerFactory(IFactory* factory,\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h:\n   53:     static status_t registerFactory(IFactory* factory,\n\n2 matches across 2 files\n\n\nSearching 38115 files for \"MediaPlayerInterface\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/record.cpp:\n   31: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/recordvideo.cpp:\n   33: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/MediaPlayerInterface.h:\n   72: // abstract base class - use MediaPlayerInterface\n  279: class MediaPlayerInterface : public MediaPlayerBase\n  282:     virtual             ~MediaPlayerInterface() { }\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/stagefright/AudioPlayer.h:\n   21: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/stagefright/Utils.h:\n   26: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h:\n   21: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:\n   52: #include <media/MediaPlayerInterface.h>\n  661:         static_cast<MediaPlayerInterface*>(p.get())->setAudioSink(mAudioOutput);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h:\n   29: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MetadataRetrieverClient.cpp:\n   36: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp:\n  176:     MediaPlayerInterface::setAudioSink(audioSink);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.h:\n   21: #include <media/MediaPlayerInterface.h>\n   27: class StagefrightPlayer : public MediaPlayerInterface {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/TestPlayerStub.cpp:\n   29: #include \"media/MediaPlayerInterface.h\"\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/TestPlayerStub.h:\n   20: #include <media/MediaPlayerInterface.h>\n   24: class MediaPlayerBase;  // in media/MediaPlayerInterface.h\n   55: class TestPlayerStub : public MediaPlayerInterface {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/nuplayer/NuPlayer.h:\n   22: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/nuplayer/NuPlayerDriver.h:\n   17: #include <media/MediaPlayerInterface.h>\n   26: struct NuPlayerDriver : public MediaPlayerInterface {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/Utils.cpp:\n   33: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/AwesomePlayer.h:\n   25: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/timedtext/TimedTextDriver.cpp:\n   25: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/timedtext/TimedTextPlayer.cpp:\n   27: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/jni/android_media_MediaPlayer.cpp:\n   25: #include <media/MediaPlayerInterface.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/tests/players/invoke_mock_media_player.cpp:\n   24: #include <media/MediaPlayerInterface.h>\n\n28 matches across 21 files\n\n\nSearching 38115 files for \"registerBuiltinFactories\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp:\n  307: void MediaPlayerFactory::registerBuiltinFactories() {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h:\n   72:     static void registerBuiltinFactories();\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp:\n  295:     MediaPlayerFactory::registerBuiltinFactories();\n\n3 matches across 3 files\n\n\nSearching 38115 files for \"MediaExtractor\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/record.cpp:\n   27: #include <media/stagefright/MediaExtractor.h>\n  120:     sp<MediaExtractor> extractor =\n  121:         MediaExtractor::Create(new FileSource(filename));\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/sf2.cpp:\n   38: #include <media/stagefright/MediaExtractor.h>\n  121:                 sp<MediaExtractor> extractor =\n  122:                     MediaExtractor::Create(dataSource);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/stagefright.cpp:\n   43: #include <media/stagefright/MediaExtractor.h>\n 1008:             sp<MediaExtractor> extractor = MediaExtractor::Create(dataSource);\n 1060:                             i, MediaExtractor::kIncludeExtensiveMetaData);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/cmds/stagefright/stream.cpp:\n   31: #include <media/stagefright/MediaExtractor.h>\n  168:     sp<MediaExtractor> extractor = MediaExtractor::Create(dataSource);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/stagefright/MediaExtractor.h:\n   29: class MediaExtractor : public RefBase {\n   31:     static sp<MediaExtractor> Create(\n   72:     MediaExtractor() : mIsDrm(false) {}\n   73:     virtual ~MediaExtractor() {}\n   78:     MediaExtractor(const MediaExtractor &);\n   79:     MediaExtractor &operator=(const MediaExtractor &);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/stagefright/NuMediaExtractor.h:\n   36: struct MediaExtractor;\n  100:     sp<MediaExtractor> mImpl;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp:\n   26: #include <media/stagefright/MediaExtractor.h>\n  209:             flags & MediaExtractor::CAN_PAUSE);\n  213:             flags & MediaExtractor::CAN_SEEK_BACKWARD);\n  217:             flags & MediaExtractor::CAN_SEEK_FORWARD);\n  221:             flags & MediaExtractor::CAN_SEEK);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/nuplayer/GenericSource.cpp:\n   32: #include <media/stagefright/MediaExtractor.h>\n  138:     sp<MediaExtractor> extractor;\n  174:         extractor = MediaExtractor::Create(mDataSource,\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/Android.mk:\n   42:         MediaExtractor.cpp                \\\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/AwesomePlayer.cpp:\n   52: #include <media/stagefright/MediaExtractor.h>\n  371:     sp<MediaExtractor> extractor = MediaExtractor::Create(dataSource);\n  394: status_t AwesomePlayer::setDataSource_l(const sp<MediaExtractor> &extractor) {\n  991:                         if (mExtractorFlags & MediaExtractor::CAN_SEEK) {\n 1449:     if (mExtractorFlags & MediaExtractor::CAN_SEEK) {\n 2360:                         // sniff it again when we call MediaExtractor::Create()\n 2394:     sp<MediaExtractor> extractor;\n 2420:         extractor = MediaExtractor::Create(\n 2531:             if (mExtractorFlags & MediaExtractor::CAN_SEEK) {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/DRMExtractor.cpp:\n  246:     mOriginalExtractor = MediaExtractor::Create(source, mime);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/MediaExtractor.cpp:\n   18: #define LOG_TAG \"MediaExtractor\"\n   39: #include <media/stagefright/MediaExtractor.h>\n   45: sp<MetaData> MediaExtractor::getMetaData() {\n   49: uint32_t MediaExtractor::flags() const {\n   54: sp<MediaExtractor> MediaExtractor::Create(\n   94:     MediaExtractor *ret = NULL;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/NuMediaExtractor.cpp:\n   35: #include <media/stagefright/MediaExtractor.h>\n   96:         mImpl = MediaExtractor::Create(dataSource);\n  145:     mImpl = MediaExtractor::Create(fileSource);\n  170:     mImpl = MediaExtractor::Create(source);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/OMXCodec.cpp:\n   43: #include <media/stagefright/MediaExtractor.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/StagefrightMetadataRetriever.cpp:\n   40: #include <media/stagefright/MediaExtractor.h>\n   81:     mExtractor = MediaExtractor::Create(mSource);\n  111:     mExtractor = MediaExtractor::Create(mSource);\n  128:     mExtractor = MediaExtractor::Create(mSource);\n  131:         ALOGE(\"Failed to instantiate a MediaExtractor.\");\n  459:             i, MediaExtractor::kIncludeExtensiveMetaData);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/WAVExtractor.cpp:\n  545:     sp<MediaExtractor> extractor = new WAVExtractor(source);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/AACExtractor.h:\n   21: #include <media/stagefright/MediaExtractor.h>\n   30: class AACExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/AMRExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   30: class AMRExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/AVIExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   28: struct AVIExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/AwesomePlayer.h:\n   39: struct MediaExtractor;\n  104:     // This is a mask of MediaExtractor::Flags.\n  255:     sp<MediaExtractor> mExtractor;\n  263:     status_t setDataSource_l(const sp<MediaExtractor> &extractor);\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/DRMExtractor.h:\n   21: #include <media/stagefright/MediaExtractor.h>\n   32: class DRMExtractor : public MediaExtractor {\n   47:     sp<MediaExtractor> mOriginalExtractor;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/FLACExtractor.h:\n   21: #include <media/stagefright/MediaExtractor.h>\n   28: class FLACExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/MP3Extractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   31: class MP3Extractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/MPEG2PSExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   33: struct MPEG2PSExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/MPEG2TSExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   37: struct MPEG2TSExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/MPEG4Extractor.h:\n   24: #include <media/stagefright/MediaExtractor.h>\n   50: class MPEG4Extractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/MidiExtractor.h:\n   21: #include <media/stagefright/MediaExtractor.h>\n   52: class MidiExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/OggExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   33: struct OggExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/StagefrightMetadataRetriever.h:\n   29: class MediaExtractor;\n   50:     sp<MediaExtractor> mExtractor;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/WAVExtractor.h:\n   22: #include <media/stagefright/MediaExtractor.h>\n   30: class WAVExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/WVMExtractor.h:\n   21: #include <media/stagefright/MediaExtractor.h>\n   30: class WVMLoadableExtractor : public MediaExtractor {\n   44: class WVMExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/matroska/MatroskaExtractor.h:\n   23: #include <media/stagefright/MediaExtractor.h>\n   35: struct MatroskaExtractor : public MediaExtractor {\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/omx/tests/OMXHarness.cpp:\n   37: #include <media/stagefright/MediaExtractor.h>\n  247: static sp<MediaExtractor> CreateExtractorFromURI(const char *uri) {\n  255:     return MediaExtractor::Create(source);\n  502:     sp<MediaExtractor> extractor = CreateExtractorFromURI(url);\n\n/home/boshin/boshin/android/AOSP/frameworks/base/api/current.txt:\n 15834:   public final class MediaExtractor {\n 15835:     ctor public MediaExtractor();\n\n/home/boshin/boshin/android/AOSP/frameworks/base/api/system-current.txt:\n 17100:   public final class MediaExtractor {\n 17101:     ctor public MediaExtractor();\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/about/versions/android-4.3.jd:\n   40:       <li><a href=\"#MediaExtractor\">MediaExtractor and MediaCodec enhancements</a></li>\n  458: <h3 id=\"MediaExtractor\">MediaExtractor and MediaCodec enhancements</h3>\n  463: android.media.MediaExtractor}. The framework underlying these APIs has been updated to support\n  465: and passing the individual streams to {@link android.media.MediaExtractor}.</p>\n  467: <p>If you want to use DASH with encrypted content, notice that the {@link android.media.MediaExtractor#getSampleCryptoInfo getSampleCryptoInfo()} method returns the {@link\n  469: sample. Also, the {@link android.media.MediaExtractor#getPsshInfo()} method has been added to\n  470: {@link android.media.MediaExtractor} so you can access the PSSH metadata for your DASH media.\n  492: android.media.MediaCrypto} for handling encrypted content, and {@link android.media.MediaExtractor}\n  495: <p>You must first construct {@link android.media.MediaExtractor} and\n  529: and one video stream. These APIs serve as a counterpart to the {@link android.media.MediaExtractor}\n  539: android.media.MediaMuxer} in combination with {@link android.media.MediaExtractor} to perform\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/about/versions/jelly-bean.jd:\n  291: encrypted media data. A new MediaExtractor API lets you get the PSSH metadata\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/guide/topics/media/exoplayer.jd:\n    7:   code, and the {@link android.media.MediaCodec} and {@link android.media.MediaExtractor} classes\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/alldiffs_index_additions.html:\n 3273: &nbsp;&nbsp;<nobr><A HREF=\"android.media.MediaExtractor.html#android.media.MediaExtractor.setDataSource_added(android.media.MediaDataSource)\" class=\"hiddenlink\" target=\"rightframe\">type&nbsp;<b>\n 3274: (<code>MediaDataSource</code>)</b>&nbsp;in&nbsp;android.media.MediaExtractor\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/alldiffs_index_all.html:\n 3265: <!-- Class MediaExtractor -->\n 3266: <A HREF=\"android.media.MediaExtractor.html\" class=\"hiddenlink\" target=\"rightframe\">MediaExtractor</A><br>\n 4765: &nbsp;&nbsp;<nobr><A HREF=\"android.media.MediaExtractor.html#android.media.MediaExtractor.setDataSource_added(android.media.MediaDataSource)\" class=\"hiddenlink\" target=\"rightframe\">type&nbsp;<b>\n 4766: (<code>MediaDataSource</code>)</b>&nbsp;in&nbsp;android.media.MediaExtractor\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/alldiffs_index_changes.html:\n 1111: <!-- Class MediaExtractor -->\n 1112: <A HREF=\"android.media.MediaExtractor.html\" class=\"hiddenlink\" target=\"rightframe\">MediaExtractor</A><br>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/android.media.MediaExtractor.html:\n   10: android.media.MediaExtractor\n   74: Class android.media.<A HREF=\"../../../../reference/android/media/MediaExtractor.html\" target=\"_top\"><font size=\"+2\"><code>MediaExtractor</code></font></A>\n   86:   <A NAME=\"android.media.MediaExtractor.setDataSource_added(android.media.MediaDataSource)\"></A>\n   87:   <nobr><code>void</code>&nbsp;<A HREF=\"../../../../reference/android/media/MediaExtractor.html#setDataSource(android.media.MediaDataSource)\" target=\"_top\"><code>setDataSource</code></A>(<code>MediaDataSource</code>)</nobr>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/classes_index_all.html:\n  564: <A HREF=\"android.media.MediaExtractor.html\" class=\"hiddenlink\" target=\"rightframe\">MediaExtractor</A><br>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/classes_index_changes.html:\n  480: <A HREF=\"android.media.MediaExtractor.html\" class=\"hiddenlink\" target=\"rightframe\">MediaExtractor</A><br>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/jdiff_statistics.html:\n 1441:   <TD><A HREF=\"android.media.MediaExtractor.html\">\n 1442: android.media.MediaExtractor</A></TD>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/methods_index_additions.html:\n 1374: &nbsp;&nbsp;<nobr><A HREF=\"android.media.MediaExtractor.html#android.media.MediaExtractor.setDataSource_added(android.media.MediaDataSource)\" class=\"hiddenlink\" target=\"rightframe\">type&nbsp;<b>\n 1375: (<code>MediaDataSource</code>)</b>&nbsp;in&nbsp;android.media.MediaExtractor\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/methods_index_all.html:\n 1703: &nbsp;&nbsp;<nobr><A HREF=\"android.media.MediaExtractor.html#android.media.MediaExtractor.setDataSource_added(android.media.MediaDataSource)\" class=\"hiddenlink\" target=\"rightframe\">type&nbsp;<b>\n 1704: (<code>MediaDataSource</code>)</b>&nbsp;in&nbsp;android.media.MediaExtractor\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sdk/api_diff/23/changes/pkg_android.media.html:\n  379:   <A NAME=\"MediaExtractor\"></A>\n  380:   <nobr><A HREF=\"android.media.MediaExtractor.html\">MediaExtractor</A></nobr>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/docs/html/sitemap.txt:\n 2128: http://developer.android.com/reference/android/media/MediaExtractor.html\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/java/android/media/MediaCodec.java:\n   45:  with {@link MediaExtractor}, {@link MediaSync}, {@link MediaMuxer}, {@link MediaCrypto},\n  167:  MediaExtractor#getTrackFormat MediaExtractor.getTrackFormat}. Inject any specific features that\n  225:  {@link MediaFormat} obtained from the {@link MediaExtractor#getTrackFormat MediaExtractor}.\n 2111:      * The class {@link android.media.MediaExtractor} provides codec\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/java/android/media/MediaDrm.java:\n   70:  * The app first constructs {@link android.media.MediaExtractor} and\n   86:  * When the app has constructed {@link android.media.MediaExtractor},\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/java/android/media/MediaExtractor.java:\n   42:  * MediaExtractor facilitates extraction of demuxed, typically encoded,  media data\n   46:  * MediaExtractor extractor = new MediaExtractor();\n   68: final public class MediaExtractor {\n   69:     public MediaExtractor() {\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/java/android/media/MediaMuxer.java:\n   44:  * // or MediaExtractor.getTrackFormat().\n   56:  *   // sample from either MediaCodec or MediaExtractor, set isAudioSample to\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/jni/android_media_MediaExtractor.cpp:\n   18: #define LOG_TAG \"MediaExtractor-JNI\"\n  599:     jclass clazz = env->FindClass(\"android/media/MediaExtractor\");\n  835:                 \"android/media/MediaExtractor\", gMethods, NELEM(gMethods));\n\n/home/boshin/boshin/android/AOSP/frameworks/base/media/jni/soundpool/SoundPool.cpp:\n   29: #include <media/stagefright/MediaExtractor.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/base/preloaded-classes:\n 1244: android.media.MediaExtractor\n\n/home/boshin/boshin/android/AOSP/frameworks/base/tests/Camera2Tests/SmartCamera/SimpleCamera/src/androidx/media/filterfw/decoder/MediaDecoder.java:\n   21: import android.media.MediaExtractor;\n   93:     private MediaExtractor mMediaExtractor;\n  228:         mMediaExtractor = new MediaExtractor();\n  271:             mMediaExtractor.seekTo(mStartMicros, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);\n\n/home/boshin/boshin/android/AOSP/frameworks/base/tests/Camera2Tests/SmartCamera/SimpleCamera/src/androidx/media/filterfw/decoder/TrackDecoder.java:\n   22: import android.media.MediaExtractor;\n  110:     public boolean feedInput(MediaExtractor mediaExtractor) {\n  116:             int sampleSize = mediaExtractor.readSampleData(destinationBuffer, 0);\n  127:             presentationTimeUs = mediaExtractor.getSampleTime();\n  135:             return mediaExtractor.advance()\n  136:                     && mediaExtractor.getSampleTrackIndex() == mTrackIndex;\n\n/home/boshin/boshin/android/AOSP/frameworks/data-binding/compiler/src/main/resources/api-versions.xml:\n 14525: \t<class name=\"android/media/MediaExtractor\" since=\"16\">\n\n/home/boshin/boshin/android/AOSP/frameworks/wilhelm/src/android/AacBqToPcmCbRenderer.cpp:\n  149:     sp<MediaExtractor> extractor = new AacAdtsExtractor(mBqSource);\n\n/home/boshin/boshin/android/AOSP/frameworks/wilhelm/src/android/android_AudioSfDecoder.cpp:\n  230:     sp<MediaExtractor> extractor = MediaExtractor::Create(dataSource);\n\n/home/boshin/boshin/android/AOSP/frameworks/wilhelm/src/android/android_AudioSfDecoder.h:\n   24: #include <media/stagefright/MediaExtractor.h>\n\n/home/boshin/boshin/android/AOSP/frameworks/wilhelm/src/android/include/AacAdtsExtractor.h:\n   28: #include <media/stagefright/MediaExtractor.h>\n   74: class AacAdtsExtractor : public MediaExtractor {\n\n192 matches across 63 files\n\n\nSearching 38115 files for \"MEDIA_MIMETYPE_CONTAINER_MPEG4\" (regex, whole word)\n\n/home/boshin/boshin/android/AOSP/frameworks/av/include/media/stagefright/MediaDefs.h:\n   53: extern const char *MEDIA_MIMETYPE_CONTAINER_MPEG4;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/MPEG4Extractor.cpp:\n  521:                     kKeyMIMEType, MEDIA_MIMETYPE_CONTAINER_MPEG4);\n 4657:         *mimeType = MEDIA_MIMETYPE_CONTAINER_MPEG4;\n 4800:     *mimeType = MEDIA_MIMETYPE_CONTAINER_MPEG4;\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/MediaDefs.cpp:\n   51: const char *MEDIA_MIMETYPE_CONTAINER_MPEG4 = \"video/mp4\";\n\n/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/MediaExtractor.cpp:\n   95:     if (!strcasecmp(mime, MEDIA_MIMETYPE_CONTAINER_MPEG4)\n\n6 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 23673,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "AOSP/frameworks/av/media/mediaserver/main_mediaserver.cpp",
			"settings":
			{
				"buffer_size": 5461,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayerClient.cpp",
			"settings":
			{
				"buffer_size": 2377,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/mediaplayer.cpp",
			"settings":
			{
				"buffer_size": 27357,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayerService.cpp",
			"settings":
			{
				"buffer_size": 9159,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayer.cpp",
			"settings":
			{
				"buffer_size": 24138,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp",
			"settings":
			{
				"buffer_size": 72975,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp",
			"settings":
			{
				"buffer_size": 10592,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp",
			"settings":
			{
				"buffer_size": 5562,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/AwesomePlayer.cpp",
			"settings":
			{
				"buffer_size": 91784,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/TimedEventQueue.cpp",
			"settings":
			{
				"buffer_size": 11060,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/DataSource.cpp",
			"settings":
			{
				"buffer_size": 7890,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/FileSource.cpp",
			"settings":
			{
				"buffer_size": 5100,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/AudioPlayer.cpp",
			"settings":
			{
				"buffer_size": 25809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/MediaExtractor.cpp",
			"settings":
			{
				"buffer_size": 4605,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/MP3Extractor.cpp",
			"settings":
			{
				"buffer_size": 19322,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/id3/ID3.cpp",
			"settings":
			{
				"buffer_size": 24548,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/MediaDefs.cpp",
			"settings":
			{
				"buffer_size": 3029,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IOMX.cpp",
			"settings":
			{
				"buffer_size": 39138,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/omx/OMX.cpp",
			"settings":
			{
				"buffer_size": 16937,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/OMXClient.cpp",
			"settings":
			{
				"buffer_size": 13567,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libstagefright/OMXCodec.cpp",
			"settings":
			{
				"buffer_size": 144598,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/services/audiopolicy/service/AudioPolicyService.h",
			"settings":
			{
				"buffer_size": 25714,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/services/audiopolicy/service/AudioPolicyService.cpp",
			"settings":
			{
				"buffer_size": 44441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioFlingerClient.h",
			"settings":
			{
				"buffer_size": 1789,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/base/core/jni/android_media_AudioTrack.cpp",
			"settings":
			{
				"buffer_size": 46945,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/AudioTrack.h",
			"settings":
			{
				"buffer_size": 50388,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/AudioTrack.cpp",
			"settings":
			{
				"buffer_size": 92977,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/AudioSystem.h",
			"settings":
			{
				"buffer_size": 21120,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/AudioSystem.cpp",
			"settings":
			{
				"buffer_size": 42458,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioFlinger.h",
			"settings":
			{
				"buffer_size": 12203,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/services/audioflinger/AudioFlinger.h",
			"settings":
			{
				"buffer_size": 33767,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/services/audioflinger/AudioFlinger.cpp",
			"settings":
			{
				"buffer_size": 105657,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioPolicyService.h",
			"settings":
			{
				"buffer_size": 9360,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IAudioPolicyService.cpp",
			"settings":
			{
				"buffer_size": 53717,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioPolicyServiceClient.h",
			"settings":
			{
				"buffer_size": 1936,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/media/libmedia/IAudioPolicyServiceClient.cpp",
			"settings":
			{
				"buffer_size": 3169,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioTrack.h",
			"settings":
			{
				"buffer_size": 4033,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/av/include/media/IAudioRecord.h",
			"settings":
			{
				"buffer_size": 1959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/system/core/include/utils/RefBase.h",
			"settings":
			{
				"buffer_size": 16101,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/system/core/libutils/RefBase.cpp",
			"settings":
			{
				"buffer_size": 19814,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/system/core/include/utils/StrongPointer.h",
			"settings":
			{
				"buffer_size": 5600,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/ProcessState.h",
			"settings":
			{
				"buffer_size": 4101,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/ProcessState.cpp",
			"settings":
			{
				"buffer_size": 11572,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/IPCThreadState.h",
			"settings":
			{
				"buffer_size": 5736,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/IPCThreadState.cpp",
			"settings":
			{
				"buffer_size": 37078,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/Parcel.h",
			"settings":
			{
				"buffer_size": 15952,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/Parcel.cpp",
			"settings":
			{
				"buffer_size": 55913,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/system/core/include/utils/Thread.h",
			"settings":
			{
				"buffer_size": 4255,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/system/core/libutils/Threads.cpp",
			"settings":
			{
				"buffer_size": 25182,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/IBinder.h",
			"settings":
			{
				"buffer_size": 5719,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/IInterface.h",
			"settings":
			{
				"buffer_size": 5342,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/IInterface.cpp",
			"settings":
			{
				"buffer_size": 2011,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/BpBinder.h",
			"settings":
			{
				"buffer_size": 4198,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/BpBinder.cpp",
			"settings":
			{
				"buffer_size": 10026,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/Binder.h",
			"settings":
			{
				"buffer_size": 3670,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/Binder.cpp",
			"settings":
			{
				"buffer_size": 7050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/BinderService.h",
			"settings":
			{
				"buffer_size": 1909,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/include/binder/IServiceManager.h",
			"settings":
			{
				"buffer_size": 3058,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/libs/binder/IServiceManager.cpp",
			"settings":
			{
				"buffer_size": 7691,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/cmds/servicemanager/service_manager.c",
			"settings":
			{
				"buffer_size": 9825,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/cmds/servicemanager/binder.h",
			"settings":
			{
				"buffer_size": 3023,
				"line_ending": "Unix"
			}
		},
		{
			"file": "AOSP/frameworks/native/cmds/servicemanager/binder.c",
			"settings":
			{
				"buffer_size": 16710,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kernel/include/uapi/linux/android/binder.h",
			"settings":
			{
				"buffer_size": 9712,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "kernel/drivers/android/binder.c",
			"settings":
			{
				"buffer_size": 104712,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/boshin/boshin/gitHub/Android/binderCodeNote/binder_withNote.c",
			"settings":
			{
				"buffer_size": 148988,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 32.0,
		"last_filter": "",
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"set Syntax:m",
				"Set Syntax: Markdown Extended"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"i",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"Package Control: en",
				"Package Control: Enable Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"e ",
				"Package Control: Enable Package"
			],
			[
				"en",
				"HTML: Encode Special Characters"
			],
			[
				"csco",
				"Cscope: Look up symbol"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp =      sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/boshin/boshin/android/AOSP/frameworks",
		"/home/boshin/boshin/android/AOSP/frameworks/native",
		"/home/boshin/boshin/android/AOSP/frameworks/native/cmds",
		"/home/boshin/boshin/android/AOSP/frameworks/native/cmds/servicemanager"
	],
	"file_history":
	[
		"/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/AwesomePlayer.cpp",
		"/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/include/media/MediaPlayerInterface.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/include/media/IMediaPlayerService.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/media/libstagefright/include/OMX.h",
		"/home/boshin/boshin/android/AOSP/frameworks/native/cmds/servicemanager/binder.h",
		"/home/boshin/boshin/android/AOSP/frameworks/native/cmds/servicemanager/binder.c",
		"/home/boshin/boshin/android/AOSP/hardware/ti/omap3/omx/audio/src/openmax_il/mp3_dec/src/OMX_Mp3Decoder.c",
		"/home/boshin/boshin/android/AOSP/hardware/ti/omap3/omx/audio/src/openmax_il/mp3_dec/src/OMX_Mp3Dec_Utils.c",
		"/home/boshin/boshin/android/AOSP/hardware/ti/omap3/omx/system/src/openmax_il/omx_core/inc/OMX_Core.h",
		"/home/boshin/boshin/android/AOSP/system/core/include/utils/KeyedVector.h",
		"/home/boshin/boshin/android/AOSP/system/core/include/utils/Vector.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/include/media/IMediaDeathNotifier.h",
		"/home/boshin/boshin/android/AOSP/frameworks/av/media/libmedia/mediametadataretriever.cpp",
		"/home/boshin/boshin/android/AOSP/frameworks/native/libs/binder/BpBinder.cpp",
		"/home/boshin/boshin/android/AOSP/frameworks/native/include/binder/BinderService.h",
		"/home/boshin/Desktop/14-609-1-05883.xlsx",
		"/home/boshin/Desktop/BindImg.png",
		"/home/boshin/Desktop/binder3.png",
		"/home/boshin/Desktop/BindImg",
		"/home/boshin/boshin/android/AOSP/frameworks/native/libs/binder/IPCThreadState.cpp",
		"/home/boshin/boshin/android/AOSP/system/core/include/utils/Condition.h",
		"/home/boshin/boshin/android/AOSP/system/core/include/cutils/threads.h",
		"/home/boshin/boshin/android/AOSP/frameworks/native/include/binder/IBatteryStats.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerLibIF.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerStub.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/src/NMCacheRadioLibDummy.cpp",
		"/home/boshin/workspace/17Cy/out/target/product/dcue2/obj/SHARED_LIBRARIES/libnimediahandler_intermediates/NIMediaHandler.cpp",
		"/home/boshin/workspace/17Cy/platform/media/nmucomparser/uComLib/NMUcomLibIF/NMuComLib.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaManager/include/NMSourceManagerDEF.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerLibIF.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerLib.h",
		"/home/boshin/workspace/17Cy/system/core/include/utils/StrongPointer.h",
		"/home/boshin/workspace/17Cy/system/core/include/utils/RefBase.h",
		"/home/boshin/workspace/17Cy/system/core/utils/RefBase.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaManager/service/NMMediaMgrSubModeAttrAPI.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerLib.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/src/NMCacheRadioLib.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/src/NMCacheRadioHandler.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/include/NMCacheRadioHandler.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/include/NMCacheRadioLib.h",
		"/home/boshin/workspace/17Cy/framework/api/idl/tuner.fidl",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDisc/DiscService/NMDiscServiceStub.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerSourceListener.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/include/NMTunerStub.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/include/NMTunerSourceListener.h",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaManager/include/NMSourceListener.h",
		"/home/boshin/workspace/17Cy/out/target/product/dcue2/obj/include/NDMcuSetting_generated.h",
		"/home/boshin/workspace/17Cy/platform/service/SettingService/service/NCSettingStub.cpp",
		"/home/boshin/workspace/17Cy/system/handler/nhsysctrl/include/nhsysctrl/NHSysCtrlHandler.h",
		"/home/boshin/workspace/17Cy/system/handler/interface/include/nhinterface/NISysCtrlHandler.h",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabLib/NMDabTypeDef.h",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabLib/NMDabLib.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabService/NMDabStub.cpp",
		"/home/boshin/workspace/17Cy/framework/plugins/setting/system/NCSystemSettingImplDCU.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabLib/NMDabCommon.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabService/NMDabStub.h",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaDab/DabLib/NMDabCallBack.h",
		"/home/boshin/workspace/17Cy/tunerparser/src/NMTunerParserUtils.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/TunerService/src/NMTunerStub.cpp",
		"/home/boshin/workspace/17Cy/platform/service/MediaProvider/include/MediaInfoProvider/NMMediaInfoDEF.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/ListControl/Dummy/NMTunerListControlDummy.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/tests/Testlib/Database/TestNMTunerDBListInfo.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/tests/Testlib/ListControl/TestNMTunerFMStationList.h",
		"/home/boshin/workspace/17Cy/mediatuner/tests/Testlib/nutshell.mk",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/lib/tunerlib/include/NMTunerLibDef.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerLibDef.h",
		"/home/boshin/workspace/17Cy/tunerparser/include/NMTunerParserDef.h",
		"/home/boshin/boshin/gitHub/inside_c_plusplus_mode/160704.cpp.002t.class",
		"/home/boshin/workspace/17Cy/system/core/include/ncore/NCTypesDefine.h",
		"/home/boshin/workspace/17Cy/mediatuner/tests/Testlib/ListControl/TestNMTunerStationListControl.cpp",
		"/home/boshin/workspace/17Cy/framework/api/idl-generated/include/media/interface/NITunerTypeCollection.h",
		"/home/boshin/workspace/17Cy/platform/service/MediaProvider/MediaInfoProvider/NMMediaInfoProvider.cpp",
		"/home/boshin/workspace/17Cy/platform/service/MediaProvider/MediaInfoProvider/NMMediaInfoUri.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerEventHandlerListener.cpp",
		"/home/boshin/workspace/17Cy/tunerparser/src/NMTunerParser.cpp",
		"/home/boshin/workspace/17Cy/platform/media/nmucomparser/parser/beepparser/NMBeepParser.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerService.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerAvcUnit.cpp",
		"/home/boshin/workspace/17Cy/packages/QmlApps/Lexus/AV/L2/L2AV.pro",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/lib/tunerlib/src/NMTunerAvcUnit.cpp",
		"/home/boshin/workspace/17Cy/tunerparser/src/NMTunerReceiver.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/lib/Request/src/NMTunerRequest.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerInfo.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerSettingControl.cpp",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/include/nhmedia/NHMediaHandlerDef.h",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/src/NHMediaHandler.cpp",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/include/nhmedia/NHMediaHandler.h",
		"/home/boshin/workspace/17Cy/framework/api/idl-generated/include/media/stub/NITunerStubReplier.h",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/tests/TestNHMediaHandler.cpp",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/tests/TestNHMediaDataRunnable.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerAvcUnit.h",
		"/home/boshin/workspace/17Cy/framework/api/idl-generated/include/media/proxy/NITunerProxy.h",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/tests/nutshell.mk",
		"/home/boshin/workspace/17Cy/system/core/include/ncore/NCThread.h",
		"/home/boshin/workspace/17Cy/system/core/include/nceventsys/NCRunnableThread.h",
		"/home/boshin/workspace/17Cy/system/comd/NHThreadTableSet.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaServiceManager/MediaTuner/NCTunerThreadTableSet.h",
		"/home/boshin/workspace/17Cy/system/handler/nhmedia/include/nhmedia/NHMediaHandler_ThreadName.h",
		"/home/boshin/workspace/17Cy/system/core/include/ncprocess/NCProcess.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/src/NMCacheRadioEncode.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/CacheRadio/src/NMCacheRadioDecode.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaServiceManager/MediaTuner/mediatuner.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/include/NMTunerContentListener.h",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaServiceManager/MediaTuner/nutshell.mk",
		"/home/boshin/workspace/17Cy/platform/base/AppFramework/include/evipprocess/NCServerProcess.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerMeterInteractControl.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerPresetListControl.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/Notify/include/NMTunerNotify.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerNotifyReceiver.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaSxm/include/NMSxmReplier.h",
		"/home/boshin/workspace/17Cy/tunerparser/include/NMTunerSysData.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/include/NMSxmTunerReplierImpl.h",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMSxmTunerReplierImpl.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/TunerService/src/NMTunerSxmInteractControl.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerMixPresetListControl.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerMixPresetListControl.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/lib/tunerlib/src/NMTunerLib.cpp",
		"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner/lib/tunerlib/include/NMTunerLib.h",
		"/home/boshin/boshin/workspace/inside_c_plusplus_mode/amazon.cpp.002t.class",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerNAInfo.cpp",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerPresetListControl.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/include/NMTunerDataControl.h",
		"/home/boshin/workspace/17Cy/system/core/include/ncore/NCString.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerEUInfo.cpp",
		"/home/boshin/workspace/17Cy/system/core/include/nceventsys/NCData.h",
		"/home/boshin/workspace/17Cy/mediatuner/lib/tunerlib/src/NMTunerOtherInfo.cpp"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/boshin/boshin/android/AOSP/frameworks/",
			"/home/boshin/boshin/android/AOSP/frameworks/,*.cpp,*.h",
			"/home/boshin/boshin/android/AOSP/frameworks/",
			"/home/boshin/boshin/android/AOSP/frameworks/,*.h",
			"/home/boshin/boshin/android/AOSP/frameworks/,-*.h",
			"/home/boshin/boshin/android/AOSP/frameworks/",
			"/home/boshin/boshin/android/AOSP/frameworks/native/include",
			"/home/boshin/boshin/android/AOSP",
			"/home/boshin/boshin/android/AOSP/frameworks",
			"/home/boshin/boshin/android/AOSP/frameworks/native,/home/boshin/boshin/android/AOSP/frameworks/native",
			"/home/boshin/boshin/android/AOSP/frameworks/native",
			"",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/platform/media/nmucomparser/parser/tunerparser,/home/boshin/workspace/17Cy/framework/service/media/MediaManager",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/platform/media/nmucomparser/parser/tunerparser",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/platform,/home/boshin/workspace/17Cy/framework/service/media/MediaDab",
			"/home/boshin/workspace/17Cy/platform,/home/boshin/workspace/17Cy/framework",
			"/home/boshin/workspace/17Cy/platform",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/,/home/boshin/workspace/17Cy/system",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/system",
			"/home/boshin/workspace/17Cy",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/,/home/boshin/workspace/17Cy/system/handler/nhmedia",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/src",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/base/AppLauncher",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/,/home/boshin/workspace/17Cy/framework/api,/home/boshin/workspace/17Cy/system/handler/nhmedia/src",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/,/home/boshin/workspace/17Cy/framework/api",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner,/home/boshin/workspace/17Cy/tunerparser/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/plugins/setting",
			"/home/boshin/workspace/17Cy/",
			"/home/boshin/workspace/17Cy/framework/",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"*.h",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/system/handler/nhmedia",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaManager/proxy",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"*.h",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/system/handler/nhmedia",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"*.h,*.cpp",
			"*.h",
			"/home/boshin/workspace/17Cy/framework/plugins/networkmanager",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaTuner",
			"/home/boshin/workspace/17Cy/framework/service/media/MediaManager",
			"*.h,*.cpp",
			"*.h",
			"*.h,*.cpp",
			"*.h",
			"/home/boshin/workspace/17Cy/platform/media/nmucomparser,/home/boshin/workspace/17Cy/MediaTuner/parser",
			"/home/boshin/workspace/17Cy/platform/media/nmucomparser",
			"*.h,*.cpp",
			"*.h *.cpp",
			"/home/boshin/workspace/17Cy/MediaTuner",
			"*.h,*.cpp",
			"*.h *.cpp",
			"*.h",
			"/home/boshin/workspace/17Cy/MediaTuner",
			"*.h *.cpp",
			"*.h",
			"*.h, *.cpp",
			"*.h *.cpp",
			"*.h",
			"",
			"*.cpp",
			"*.h",
			"*.cpp",
			"",
			"*.h,*.cpp",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mQueue",
			"setParameter",
			"mAudioAttributesParcel",
			"mCurrentState",
			"attachNewPlayer",
			"setDataSource_l",
			"MediaPlayerInterface",
			"MEDIA_MIMETYPE_CONTAINER_MPEG4",
			"SniffMPEG4",
			"gSniffers",
			"SnifferFunc",
			"MediaExtractor",
			"registerBuiltinFactories",
			"MediaPlayerInterface",
			"registerFactory",
			"registerFactory_l",
			"mAudioSource",
			"setSource",
			"mAudioSource",
			"mAudioPlayer",
			"MediaPlayerBase",
			"mOmxSource",
			"SetCallbacks",
			"pthread_create",
			"SetCallbacks",
			"InternalOptionType",
			"audio_track_cblk_t",
			"audioFlinger",
			"aps",
			"mNotificationClients",
			"writeToTrack",
			"AudioTrack",
			"getMinFrameCount",
			"AudioPolicyService",
			"getOutput",
			"GET_OUTPUT",
			"BnAudioPolicyService",
			"mPlayer",
			"createPlayer",
			"sFactoryMap",
			"mPlayer",
			"unflatten_binder",
			"onAsBinder",
			"create",
			"cre",
			"BpMediaPlayerService",
			"create",
			"crea",
			"creat",
			"local",
			"onAsBinder",
			"startThreadPool",
			"PoolThread",
			"joinThreadPool",
			"interface_cast",
			"addService",
			"CHECK_INTERFACE",
			"do_add_service",
			"svcinfo_death",
			"svcinfo",
			"svclist",
			"BINDER_SERVICE_MANAGER",
			"svcmgr_handler",
			"binder_loop",
			"mProcess",
			"joinThreadPool",
			"mThreadPoolStarted",
			"setTheContextObject",
			"the_context_object",
			"setTheContextObject",
			"the_context_object",
			"mBase",
			"weakref_type",
			"remote",
			"mHandle",
			"servicem",
			"/*",
			"IServiceManager.h",
			"defaultServiceManager",
			"mVMStart",
			"talkWithDriver",
			"flat_binder_object",
			"BpServiceManager",
			"flatten_binder",
			"writeWeakBinder",
			"IMPLEMENT_META_INTERFACE",
			"BnMediaPlayerService",
			"addService",
			"flatten_binder",
			"cookie",
			"joinThreadPool",
			"startThreadPool",
			"svcmgr_handler",
			"run",
			"joinThreadPool",
			"mProcess",
			"COMPARE_WEAK",
			"talkWithDriver",
			"executeCommand",
			"mProcess",
			"threadLoop",
			"PoolThread",
			"ioc",
			"queryLocalInterface",
			"selinux_android_service_context_handle",
			"do_find_service",
			"sehandle",
			"svcmgr_id",
			"BINDER_SERVICE_MANAGER",
			"binder_state",
			"binder_transaction_data",
			"binder_txn",
			"binder_uintptr_t",
			"binder_parse",
			"write_consumed",
			"DeathRecipient",
			"binderDied",
			"mObitsSent",
			"mDescriptorCache",
			"insertAt",
			"lookupHandleLocked",
			"mHandleToObject",
			"mManagesContexts",
			"spawnPooledThread",
			"PoolThread",
			"mHandleToObject",
			"Vector",
			"force_set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"m_VRing",
			"NCTunerThreadTableSet",
			"icmdInfo.data.push_back",
			"m_isMixPresetListContructed",
			"sid > -1",
			"UINT",
			"m_pMixPresetListCrtl->",
			"m_pMixPresetListCrtl",
			"NMTunerMixPresetListControl_T",
			"m_pMixPresetListCrtl->",
			"NMTunerMixPresetListControl_T",
			"NMTUNERMIXPRESETLISTCONTROL_T_H",
			"NMTunerMixPresetListControl_T",
			"customTarfficRadio",
			"onKeyLockUpdate",
			"NMTunerNADataControl",
			"allowSxmPChHighLight",
			"getTp40PeerByCmdID",
			"m_reqCmdValueArr",
			"m_reqCmdTypeValue",
			"NHMediaReqCmdType_CameraScreenStatus",
			"NMTunerContentListener",
			"void",
			"NMTunerContentListener",
			"BT tel unsupport",
			"// NCLOGD",
			"NCLOGD",
			"// NCLOGD",
			"getDisplayStatus",
			"m_displayEnable",
			"setBtTelSupportStatus",
			"m_isBtTelSupported",
			"NMTunerLibIF::instance()",
			"m_isBtTelSupported",
			"getBtTelSupportStatus",
			"setBtTelSupportStatus",
			"m_isBtTelSupported",
			"getBtTelSupportStatus",
			"setBtTelSupportStatus",
			"NMTunerOtherInfo",
			"NMTunerEUInfo",
			"NMTunerOtherInfo",
			"requestSrcStatusChangedWithCR",
			"NMTunerSourceListener",
			"// NMLOGD",
			"NMLOGE",
			"NMTunerWithCRSourceListener",
			"NMTUNERWITHCRSOURCELISTENER_H",
			"if ((NULL != m_pRunnableLooper) && (NULL != NMCacheRadioLib::instance()) {",
			"NMTunerWithCRSourceListener",
			"NMTunerWithCacheRadioSourceListener",
			"NMTunerPauseMgr",
			"NMTunerPauseMgr.h",
			"NMTUNERPAUSEMGR_H",
			"// NMLOGD",
			"meterTunerInfo",
			"saveMeterTunerInfo",
			"NMTunerMeterInteractControl",
			"saveMeterPlayInfo",
			"meterPlayInfo",
			"MediaInfoKey_Tuner",
			"MediaInfo_Tuner",
			"m_lastMeterPlayInfo",
			"nmMixPresetInfoVec",
			"NMTunerMeterInteractControl",
			"NMTunerChinaTrafficRadio",
			"m_envSettingInfo.NMTunerLib",
			"env",
			"executeDriverSettingBackUpEvent",
			"m_driverSettingEventBackUpVec",
			"m_smartAgentEventBackUpVec",
			"executeSmartAgentBackUpEvent",
			"bool frontSrc = true",
			"bool frontSrc",
			"INT32 scrID = NMTunerScreenId_Front",
			"NMTunerScreenId",
			"NMTunerLibIF",
			"m_trafficRadioStatusLastFreq",
			"m_trafficRadioStatusFreq",
			"NMTunerLibIF::",
			"m_trafficRadioStatusFreq",
			"NMTunerLibIF",
			"            if (NMTunerMode_CacheMode != m_curTunerMode) {\n                NMTunerNotify().set(NMTunerNotifyID_PlayInfoUpdate);\n            }",
			"m_pTunerLibIF->getCurTunerMode()",
			"m_isSyncDataFinish",
			"(m_syncDataFinish && (NULL != m_pRunnableLooper))",
			"NITunerScreenId",
			"m_curFrontTunerBand",
			"front source off",
			"m_tunerFrontSourceStatus",
			"front source off",
			"m_tunerFrontSourceStatus",
			"NCLOGD",
			"broadcastRadioCompositeStatus",
			"broadcastRadioHDPsStatus",
			"NMTunerPresetListControl",
			"NMTunerEUInfo",
			"pChBand",
			"tmpList",
			"tagInfo2Len",
			"tagInfo1Len",
			"NMTunerLib::",
			"m_pEvent",
			"NMTunerDataEventCallBack",
			"m_pEvent",
			"NMTunerDataEventCallBack",
			"NMTunerNAInfo",
			"TestNMTunerOtherDataControl",
			"TestNMTunerNADataControl",
			"m_pTunerEUInfo",
			"onLazyStart",
			"onFirstAppReady",
			"NMTunerEUInfo",
			"NMTunerEUDataControl",
			"NMTunerEUInfo",
			"NMSxmTunerReplierImpl",
			"lastStatus",
			"lastBand",
			"lastFreq",
			"m_pTunerOtherInfo",
			"NMTunerOtherInfo",
			"NMTunerOtherDataControl",
			"TestNMTunerOtherDataControl",
			"TestNMTunerNADataControl",
			"getStatus",
			"NMSxmProxy",
			"NMSxmReplier",
			"NMSxmTunerProxy"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "AOSP/frameworks/av/include/media/IMediaPlayerClient.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1426,
						"regions":
						{
						},
						"selection":
						[
							[
								1092,
								1092
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "AOSP/frameworks/av/include/media/mediaplayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11804,
						"regions":
						{
						},
						"selection":
						[
							[
								7208,
								7208
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1795.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "AOSP/frameworks/av/include/media/IMediaPlayerService.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4009,
						"regions":
						{
						},
						"selection":
						[
							[
								3653,
								3653
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 987.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "AOSP/frameworks/av/include/media/IMediaPlayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5583,
						"regions":
						{
						},
						"selection":
						[
							[
								5248,
								5248
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 985.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "AOSP/frameworks/av/include/media/MediaPlayerInterface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11809,
						"regions":
						{
						},
						"selection":
						[
							[
								6430,
								6430
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1780.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17871,
						"regions":
						{
						},
						"selection":
						[
							[
								3223,
								3223
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1000.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3439,
						"regions":
						{
						},
						"selection":
						[
							[
								859,
								859
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "AOSP/frameworks/av/include/media/MediaPlayerInterface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11809,
						"regions":
						{
						},
						"selection":
						[
							[
								11008,
								11008
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3730.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2647,
						"regions":
						{
						},
						"selection":
						[
							[
								900,
								900
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "AOSP/frameworks/av/media/libstagefright/include/TimedEventQueue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4544,
						"regions":
						{
						},
						"selection":
						[
							[
								3809,
								3809
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1485.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "AOSP/frameworks/av/media/libstagefright/include/AwesomePlayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10556,
						"regions":
						{
						},
						"selection":
						[
							[
								4412,
								4412
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1518.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "AOSP/frameworks/av/include/media/stagefright/MediaExtractor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2297,
						"regions":
						{
						},
						"selection":
						[
							[
								999,
								999
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "AOSP/frameworks/av/media/libstagefright/include/MP3Extractor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1656,
						"regions":
						{
						},
						"selection":
						[
							[
								854,
								854
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "AOSP/frameworks/av/include/media/stagefright/DataSource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6106,
						"regions":
						{
						},
						"selection":
						[
							[
								3819,
								3819
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 417.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "AOSP/frameworks/av/include/media/stagefright/FileSource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1864,
						"regions":
						{
						},
						"selection":
						[
							[
								887,
								887
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "AOSP/frameworks/av/media/libstagefright/include/ID3.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2512,
						"regions":
						{
						},
						"selection":
						[
							[
								743,
								743
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "AOSP/frameworks/av/include/media/stagefright/AudioPlayer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3789,
						"regions":
						{
						},
						"selection":
						[
							[
								2147,
								2147
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 552.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "AOSP/frameworks/av/include/media/IOMX.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9556,
						"regions":
						{
						},
						"selection":
						[
							[
								7236,
								7236
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 379.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "AOSP/frameworks/av/media/libstagefright/include/OMX.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5996,
						"regions":
						{
						},
						"selection":
						[
							[
								821,
								821
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "AOSP/frameworks/av/include/media/stagefright/OMXClient.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1022,
						"regions":
						{
						},
						"selection":
						[
							[
								886,
								886
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "AOSP/frameworks/av/include/media/stagefright/OMXCodec.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12454,
						"regions":
						{
						},
						"selection":
						[
							[
								950,
								950
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				}
			]
		},
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 20,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23673,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										202,
										219
									],
									[
										257,
										274
									],
									[
										302,
										319
									],
									[
										384,
										401
									],
									[
										448,
										465
									],
									[
										630,
										647
									],
									[
										870,
										885
									],
									[
										1030,
										1045
									],
									[
										1262,
										1282
									],
									[
										1391,
										1411
									],
									[
										1537,
										1557
									],
									[
										1571,
										1591
									],
									[
										1649,
										1669
									],
									[
										1788,
										1808
									],
									[
										1918,
										1938
									],
									[
										2063,
										2083
									],
									[
										2210,
										2230
									],
									[
										2261,
										2281
									],
									[
										2443,
										2463
									],
									[
										2595,
										2615
									],
									[
										2729,
										2749
									],
									[
										2896,
										2916
									],
									[
										2960,
										2980
									],
									[
										3102,
										3122
									],
									[
										3243,
										3263
									],
									[
										3310,
										3330
									],
									[
										3370,
										3390
									],
									[
										3513,
										3533
									],
									[
										3663,
										3683
									],
									[
										3725,
										3745
									],
									[
										3851,
										3871
									],
									[
										3992,
										4012
									],
									[
										4139,
										4159
									],
									[
										4286,
										4306
									],
									[
										4424,
										4444
									],
									[
										4571,
										4591
									],
									[
										4830,
										4854
									],
									[
										4980,
										5004
									],
									[
										5139,
										5163
									],
									[
										5370,
										5384
									],
									[
										5402,
										5416
									],
									[
										5445,
										5459
									],
									[
										5604,
										5618
									],
									[
										5648,
										5662
									],
									[
										5703,
										5717
									],
									[
										5856,
										5870
									],
									[
										5896,
										5910
									],
									[
										5924,
										5938
									],
									[
										5998,
										6012
									],
									[
										6154,
										6168
									],
									[
										6186,
										6200
									],
									[
										6214,
										6228
									],
									[
										6355,
										6369
									],
									[
										6410,
										6424
									],
									[
										6445,
										6459
									],
									[
										6501,
										6515
									],
									[
										6532,
										6546
									],
									[
										6553,
										6567
									],
									[
										6583,
										6597
									],
									[
										6615,
										6629
									],
									[
										6742,
										6756
									],
									[
										6772,
										6786
									],
									[
										6929,
										6943
									],
									[
										6974,
										6988
									],
									[
										7029,
										7043
									],
									[
										7092,
										7106
									],
									[
										7154,
										7168
									],
									[
										7320,
										7334
									],
									[
										7352,
										7366
									],
									[
										7406,
										7420
									],
									[
										7538,
										7552
									],
									[
										7697,
										7711
									],
									[
										7729,
										7743
									],
									[
										7757,
										7771
									],
									[
										7849,
										7863
									],
									[
										7932,
										7946
									],
									[
										7993,
										8007
									],
									[
										8083,
										8097
									],
									[
										8122,
										8136
									],
									[
										8176,
										8190
									],
									[
										8241,
										8255
									],
									[
										8388,
										8402
									],
									[
										8539,
										8553
									],
									[
										8590,
										8604
									],
									[
										8628,
										8642
									],
									[
										8676,
										8690
									],
									[
										8718,
										8732
									],
									[
										8734,
										8748
									],
									[
										8769,
										8783
									],
									[
										8923,
										8937
									],
									[
										8964,
										8978
									],
									[
										9019,
										9033
									],
									[
										9074,
										9088
									],
									[
										9224,
										9238
									],
									[
										9380,
										9394
									],
									[
										9422,
										9436
									],
									[
										9479,
										9493
									],
									[
										9536,
										9550
									],
									[
										9615,
										9629
									],
									[
										9656,
										9670
									],
									[
										9801,
										9815
									],
									[
										9983,
										9997
									],
									[
										10036,
										10050
									],
									[
										10181,
										10195
									],
									[
										10234,
										10248
									],
									[
										10379,
										10393
									],
									[
										10433,
										10447
									],
									[
										10558,
										10572
									],
									[
										10606,
										10620
									],
									[
										10643,
										10657
									],
									[
										10716,
										10730
									],
									[
										10873,
										10887
									],
									[
										10926,
										10940
									],
									[
										10957,
										10971
									],
									[
										11122,
										11136
									],
									[
										11176,
										11190
									],
									[
										11321,
										11335
									],
									[
										11374,
										11388
									],
									[
										11523,
										11537
									],
									[
										11581,
										11595
									],
									[
										11730,
										11744
									],
									[
										11788,
										11802
									],
									[
										11935,
										11949
									],
									[
										11990,
										12004
									],
									[
										12136,
										12150
									],
									[
										12190,
										12204
									],
									[
										12335,
										12349
									],
									[
										12389,
										12403
									],
									[
										12528,
										12542
									],
									[
										12558,
										12572
									],
									[
										12714,
										12728
									],
									[
										12767,
										12781
									],
									[
										12912,
										12926
									],
									[
										12973,
										12987
									],
									[
										13025,
										13039
									],
									[
										13176,
										13190
									],
									[
										13235,
										13249
									],
									[
										13382,
										13396
									],
									[
										13417,
										13431
									],
									[
										13493,
										13507
									],
									[
										13539,
										13553
									],
									[
										13692,
										13706
									],
									[
										13733,
										13747
									],
									[
										13854,
										13868
									],
									[
										13895,
										13909
									],
									[
										14031,
										14045
									],
									[
										14047,
										14061
									],
									[
										14114,
										14128
									],
									[
										14130,
										14144
									],
									[
										14199,
										14213
									],
									[
										14346,
										14360
									],
									[
										14462,
										14476
									],
									[
										14592,
										14606
									],
									[
										14675,
										14689
									],
									[
										14839,
										14853
									],
									[
										14911,
										14925
									],
									[
										15022,
										15036
									],
									[
										15112,
										15126
									],
									[
										15264,
										15278
									],
									[
										15488,
										15502
									],
									[
										15675,
										15689
									],
									[
										15709,
										15723
									],
									[
										15898,
										15912
									],
									[
										16040,
										16054
									],
									[
										16089,
										16103
									],
									[
										16149,
										16163
									],
									[
										16220,
										16234
									],
									[
										16254,
										16268
									],
									[
										16443,
										16457
									],
									[
										16589,
										16603
									],
									[
										16638,
										16652
									],
									[
										16698,
										16712
									],
									[
										16861,
										16875
									],
									[
										16948,
										16962
									],
									[
										17005,
										17019
									],
									[
										17070,
										17084
									],
									[
										17225,
										17239
									],
									[
										17511,
										17525
									],
									[
										17571,
										17585
									],
									[
										17736,
										17750
									],
									[
										17796,
										17810
									],
									[
										17962,
										17976
									],
									[
										18005,
										18019
									],
									[
										18191,
										18205
									],
									[
										18225,
										18239
									],
									[
										18414,
										18428
									],
									[
										18585,
										18599
									],
									[
										18619,
										18633
									],
									[
										18808,
										18822
									],
									[
										18949,
										18963
									],
									[
										19008,
										19022
									],
									[
										19029,
										19043
									],
									[
										19188,
										19202
									],
									[
										19320,
										19334
									],
									[
										19405,
										19419
									],
									[
										19435,
										19449
									],
									[
										19554,
										19568
									],
									[
										19584,
										19598
									],
									[
										19646,
										19660
									],
									[
										19823,
										19837
									],
									[
										19903,
										19917
									],
									[
										20026,
										20040
									],
									[
										20117,
										20131
									],
									[
										20148,
										20162
									],
									[
										20192,
										20206
									],
									[
										20227,
										20241
									],
									[
										20354,
										20368
									],
									[
										20435,
										20449
									],
									[
										20590,
										20604
									],
									[
										20666,
										20680
									],
									[
										20722,
										20736
									],
									[
										20887,
										20901
									],
									[
										20995,
										21009
									],
									[
										21187,
										21201
									],
									[
										21222,
										21236
									],
									[
										21291,
										21305
									],
									[
										21365,
										21379
									],
									[
										21581,
										21595
									],
									[
										21633,
										21647
									],
									[
										21648,
										21662
									],
									[
										21702,
										21716
									],
									[
										21795,
										21809
									],
									[
										21853,
										21867
									],
									[
										21908,
										21922
									],
									[
										22101,
										22115
									],
									[
										22234,
										22248
									],
									[
										22402,
										22416
									],
									[
										22430,
										22444
									],
									[
										22592,
										22606
									],
									[
										22738,
										22752
									],
									[
										22795,
										22809
									],
									[
										23035,
										23065
									],
									[
										23197,
										23227
									],
									[
										23257,
										23287
									],
									[
										23312,
										23342
									],
									[
										23447,
										23477
									],
									[
										23615,
										23645
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								23470,
								23470
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7395.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "AOSP/frameworks/av/media/mediaserver/main_mediaserver.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5461,
						"regions":
						{
						},
						"selection":
						[
							[
								4982,
								4982
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1555.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2377,
						"regions":
						{
						},
						"selection":
						[
							[
								847,
								847
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "AOSP/frameworks/av/media/libmedia/mediaplayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27357,
						"regions":
						{
						},
						"selection":
						[
							[
								7604,
								7604
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3482.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayerService.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9159,
						"regions":
						{
						},
						"selection":
						[
							[
								4993,
								4993
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1815.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "AOSP/frameworks/av/media/libmedia/IMediaPlayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24138,
						"regions":
						{
						},
						"selection":
						[
							[
								1770,
								1770
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 572.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72975,
						"regions":
						{
						},
						"selection":
						[
							[
								29888,
								29888
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13487.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10592,
						"regions":
						{
						},
						"selection":
						[
							[
								5446,
								5446
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1645.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "AOSP/frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5562,
						"regions":
						{
						},
						"selection":
						[
							[
								2378,
								2378
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "AOSP/frameworks/av/media/libstagefright/AwesomePlayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 91784,
						"regions":
						{
						},
						"selection":
						[
							[
								67869,
								67869
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33072.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "AOSP/frameworks/av/media/libstagefright/TimedEventQueue.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11060,
						"regions":
						{
						},
						"selection":
						[
							[
								3090,
								3090
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1255.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "AOSP/frameworks/av/media/libstagefright/DataSource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7890,
						"regions":
						{
						},
						"selection":
						[
							[
								2945,
								2945
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1264.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "AOSP/frameworks/av/media/libstagefright/FileSource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5100,
						"regions":
						{
						},
						"selection":
						[
							[
								3301,
								3301
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 495.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "AOSP/frameworks/av/media/libstagefright/AudioPlayer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25809,
						"regions":
						{
						},
						"selection":
						[
							[
								2369,
								2369
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2052.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "AOSP/frameworks/av/media/libstagefright/MediaExtractor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4605,
						"regions":
						{
						},
						"selection":
						[
							[
								3156,
								3156
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "AOSP/frameworks/av/media/libstagefright/MP3Extractor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19322,
						"regions":
						{
						},
						"selection":
						[
							[
								18766,
								18766
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9402.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "AOSP/frameworks/av/media/libstagefright/id3/ID3.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24548,
						"regions":
						{
						},
						"selection":
						[
							[
								10905,
								10905
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5892.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "AOSP/frameworks/av/media/libstagefright/MediaDefs.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3029,
						"regions":
						{
						},
						"selection":
						[
							[
								1229,
								1229
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 257.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "AOSP/frameworks/av/media/libmedia/IOMX.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39138,
						"regions":
						{
						},
						"selection":
						[
							[
								1733,
								1733
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3195.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "AOSP/frameworks/av/media/libstagefright/omx/OMX.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16937,
						"regions":
						{
						},
						"selection":
						[
							[
								1261,
								1261
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 207.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "AOSP/frameworks/av/media/libstagefright/OMXClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13567,
						"regions":
						{
						},
						"selection":
						[
							[
								12996,
								12996
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5973.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "AOSP/frameworks/av/media/libstagefright/OMXCodec.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 144598,
						"regions":
						{
						},
						"selection":
						[
							[
								8680,
								8680
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4032.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 42,
					"file": "AOSP/frameworks/av/services/audiopolicy/service/AudioPolicyService.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25714,
						"regions":
						{
						},
						"selection":
						[
							[
								1744,
								1744
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 422.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "AOSP/frameworks/av/services/audiopolicy/service/AudioPolicyService.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44441,
						"regions":
						{
						},
						"selection":
						[
							[
								2089,
								2089
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2250.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "AOSP/frameworks/av/include/media/IAudioFlingerClient.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1789,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "AOSP/frameworks/base/core/jni/android_media_AudioTrack.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46945,
						"regions":
						{
						},
						"selection":
						[
							[
								36326,
								36326
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13733.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "AOSP/frameworks/av/include/media/AudioTrack.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50388,
						"regions":
						{
						},
						"selection":
						[
							[
								1004,
								1004
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "AOSP/frameworks/av/media/libmedia/AudioTrack.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 92977,
						"regions":
						{
						},
						"selection":
						[
							[
								44975,
								44975
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19294.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "AOSP/frameworks/av/include/media/AudioSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21120,
						"regions":
						{
						},
						"selection":
						[
							[
								17284,
								17284
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4860.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "AOSP/frameworks/av/media/libmedia/AudioSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42458,
						"regions":
						{
						},
						"selection":
						[
							[
								24683,
								24683
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10759.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "AOSP/frameworks/av/include/media/IAudioFlinger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12203,
						"regions":
						{
						},
						"selection":
						[
							[
								6528,
								6528
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2340.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "AOSP/frameworks/av/services/audioflinger/AudioFlinger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33767,
						"regions":
						{
						},
						"selection":
						[
							[
								19285,
								19285
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7007.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "AOSP/frameworks/av/services/audioflinger/AudioFlinger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 105657,
						"regions":
						{
						},
						"selection":
						[
							[
								41645,
								41645
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18302.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "AOSP/frameworks/av/include/media/IAudioPolicyService.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9360,
						"regions":
						{
						},
						"selection":
						[
							[
								8761,
								8761
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1806.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "AOSP/frameworks/av/media/libmedia/IAudioPolicyService.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53717,
						"regions":
						{
						},
						"selection":
						[
							[
								33009,
								33009
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11974.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "AOSP/frameworks/av/include/media/IAudioPolicyServiceClient.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1936,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "AOSP/frameworks/av/media/libmedia/IAudioPolicyServiceClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3169,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "AOSP/frameworks/av/include/media/IAudioTrack.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4033,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "AOSP/frameworks/av/include/media/IAudioRecord.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1959,
						"regions":
						{
						},
						"selection":
						[
							[
								969,
								969
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				}
			]
		},
		{
			"selected": 19,
			"sheets":
			[
				{
					"buffer": 59,
					"file": "AOSP/system/core/include/utils/RefBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16101,
						"regions":
						{
						},
						"selection":
						[
							[
								7885,
								7885
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2783.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "AOSP/system/core/libutils/RefBase.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19814,
						"regions":
						{
						},
						"selection":
						[
							[
								12078,
								12078
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5777.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "AOSP/system/core/include/utils/StrongPointer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5600,
						"regions":
						{
						},
						"selection":
						[
							[
								5348,
								5348
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2205.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "AOSP/frameworks/native/include/binder/ProcessState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4101,
						"regions":
						{
						},
						"selection":
						[
							[
								3812,
								3812
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 790.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "AOSP/frameworks/native/libs/binder/ProcessState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11572,
						"regions":
						{
						},
						"selection":
						[
							[
								1590,
								1590
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 525.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "AOSP/frameworks/native/include/binder/IPCThreadState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5736,
						"regions":
						{
						},
						"selection":
						[
							[
								5104,
								5104
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1041.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "AOSP/frameworks/native/libs/binder/IPCThreadState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37078,
						"regions":
						{
						},
						"selection":
						[
							[
								19002,
								19002
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9417.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "AOSP/frameworks/native/include/binder/Parcel.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15952,
						"regions":
						{
						},
						"selection":
						[
							[
								1403,
								1403
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 310.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "AOSP/frameworks/native/libs/binder/Parcel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55913,
						"regions":
						{
						},
						"selection":
						[
							[
								36302,
								36302
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19572.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "AOSP/system/core/include/utils/Thread.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4255,
						"regions":
						{
						},
						"selection":
						[
							[
								1175,
								1175
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 315.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "AOSP/system/core/libutils/Threads.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25182,
						"regions":
						{
						},
						"selection":
						[
							[
								24145,
								24145
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11010.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "AOSP/frameworks/native/include/binder/IBinder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5719,
						"regions":
						{
						},
						"selection":
						[
							[
								5468,
								5468
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1330.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "AOSP/frameworks/native/include/binder/IInterface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5342,
						"regions":
						{
						},
						"selection":
						[
							[
								4950,
								4950
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1485.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "AOSP/frameworks/native/libs/binder/IInterface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2011,
						"regions":
						{
						},
						"selection":
						[
							[
								1042,
								1042
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 55.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "AOSP/frameworks/native/include/binder/BpBinder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4198,
						"regions":
						{
						},
						"selection":
						[
							[
								4088,
								4088
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 28.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "AOSP/frameworks/native/libs/binder/BpBinder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10026,
						"regions":
						{
						},
						"selection":
						[
							[
								6594,
								6594
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2115.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "AOSP/frameworks/native/include/binder/Binder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3670,
						"regions":
						{
						},
						"selection":
						[
							[
								423,
								423
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "AOSP/frameworks/native/libs/binder/Binder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7050,
						"regions":
						{
						},
						"selection":
						[
							[
								4804,
								4804
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "AOSP/frameworks/native/include/binder/BinderService.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1909,
						"regions":
						{
						},
						"selection":
						[
							[
								762,
								762
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "AOSP/frameworks/native/include/binder/IServiceManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3058,
						"regions":
						{
						},
						"selection":
						[
							[
								2673,
								2673
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "AOSP/frameworks/native/libs/binder/IServiceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7691,
						"regions":
						{
						},
						"selection":
						[
							[
								4072,
								4072
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1245.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "AOSP/frameworks/native/cmds/servicemanager/service_manager.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9825,
						"regions":
						{
						},
						"selection":
						[
							[
								9825,
								9825
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4821.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "AOSP/frameworks/native/cmds/servicemanager/binder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3023,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "AOSP/frameworks/native/cmds/servicemanager/binder.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16710,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "kernel/include/uapi/linux/android/binder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9712,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "kernel/drivers/android/binder.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 104712,
						"regions":
						{
						},
						"selection":
						[
							[
								415,
								415
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "/home/boshin/boshin/gitHub/Android/binderCodeNote/binder_withNote.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 148988,
						"regions":
						{
						},
						"selection":
						[
							[
								1285,
								1285
							]
						],
						"settings":
						{
							"side_bar_folders_auto_load_folder": 1,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			],
			[
				3,
				0,
				4,
				1
			]
		],
		"cols":
		[
			0.0,
			0.44074074074,
			0.938271604938,
			0.969135802469,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 27.0
	},
	"output.find_results":
	{
		"height": 27.0
	},
	"pinned_build_system": "",
	"project": "AOSP.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"timedeventqueue",
				"frameworks/av/media/libstagefright/include/TimedEventQueue.h"
			],
			[
				"datasource",
				"frameworks/av/media/libstagefright/DataSource.cpp"
			],
			[
				"iaudiopolicyservice",
				"frameworks/av/media/libmedia/IAudioPolicyService.cpp"
			],
			[
				"audiosystem",
				"frameworks/av/media/libmedia/AudioSystem.cpp"
			],
			[
				"audiotrack",
				"frameworks/av/media/libmedia/AudioTrack.cpp"
			],
			[
				"audiotrack.h",
				"frameworks/av/include/media/AudioTrack.h"
			],
			[
				"android_media_track",
				"frameworks/base/core/jni/android_media_AudioTrack.cpp"
			],
			[
				"iomx.c",
				"frameworks/av/media/libmedia/IOMX.cpp"
			],
			[
				"iomx.h",
				"frameworks/av/include/media/IOMX.h"
			],
			[
				"omx",
				"frameworks/av/media/libstagefright/omx/OMX.cpp"
			],
			[
				"omx.h",
				"frameworks/av/media/libstagefright/include/OMX.h"
			],
			[
				"mediaplayerfactory",
				"frameworks/av/media/libmediaplayerservice/MediaPlayerFactory.cpp"
			],
			[
				"mediaplyer.cpp",
				"frameworks/av/media/libmedia/mediaplayer.cpp"
			],
			[
				"mediametadataretriever",
				"frameworks/av/media/libmedia/mediametadataretriever.cpp"
			],
			[
				"iinterface",
				"frameworks/native/include/binder/IInterface.h"
			],
			[
				"mediaplayerinterface",
				"frameworks/av/include/media/MediaPlayerInterface.h"
			],
			[
				"main_mediaserver",
				"frameworks/av/media/mediaserver/main_mediaserver.cpp"
			],
			[
				"nmsourcemanagerdef",
				"framework/service/media/MediaManager/include/NMSourceManagerDEF.h"
			],
			[
				"ndmcusetting_generated",
				"out/target/product/dcue2/obj/include/NDMcuSetting_generated.h"
			],
			[
				"nctypesdefine.h",
				"system/core/include/ncore/NCTypesDefine.h"
			],
			[
				"nmmediainfodef.h",
				"platform/service/MediaProvider/include/MediaInfoProvider/NMMediaInfoDEF.h"
			],
			[
				"nimediahandler",
				"system/handler/interface/include/nhinterface/NIMediaHandler.h"
			],
			[
				"nimediahandlerstub",
				"out/target/product/dcue2/obj/SHARED_LIBRARIES/libnimediahandler_intermediates/nistub/NIMediaHandlerStub.h"
			],
			[
				"niinterface",
				"system/handler/interface/include/nhinterface/NIInterface.h"
			],
			[
				"",
				"system/handler/nhmedia/tests/TestNHMediaHandler.cpp"
			],
			[
				"ncthread",
				"system/core/include/ncore/NCThread.h"
			],
			[
				"ncrunnablethread",
				"system/core/include/nceventsys/NCRunnableThread.h"
			],
			[
				"ncprocess",
				"system/core/include/ncprocess/NCProcess.h"
			],
			[
				"ncserverprocess",
				"platform/base/AppFramework/include/evipprocess/NCServerProcess.h"
			],
			[
				"nhmediahandler",
				"system/handler/nhmedia/include/nhmedia/NHMediaHandler.h"
			],
			[
				"nmtunernotify",
				"mediatuner/lib/Notify/include/NMTunerNotify.h"
			],
			[
				"nmsxmreplier",
				"framework/service/media/MediaSxm/include/NMSxmReplier.h"
			],
			[
				"ncstring",
				"system/core/include/ncore/NCString.h"
			],
			[
				"ncdata",
				"system/core/include/nceventsys/NCData.h"
			],
			[
				"nctypesdefine",
				"system/core/include/ncore/NCTypesDefine.h"
			],
			[
				"nmtunerbackupmemory",
				"mediatuner/lib/Common/include/NMTunerBackUpMemory.h"
			],
			[
				"nccontentlistener",
				"platform/base/ContentProvider/include/contentresolver/NCContentListener.h"
			],
			[
				"nmrunnabletimer",
				"platform/media/mediautils/include/NMRunnableTimer.h"
			],
			[
				"nmmediainfodef",
				"platform/service/MediaProvider/include/MediaInfoProvider/NMMediaInfoDEF.h"
			],
			[
				"ncsyncobj",
				"system/core/include/ncore/NCSyncObj.h"
			],
			[
				"property_get",
				"vendor/renesas/gstreamer/gstreamer-bad/src/tests/examples/uvch264/enum_property_gtk2.glade"
			],
			[
				"ncenvparser",
				"platform/service/SystemServer/service/NCEnvParser.cpp"
			],
			[
				"ncenvironment",
				"platform/service/SystemServer/service/NCEnvironment.cpp"
			],
			[
				"nhucomintracalltable.h",
				"system/handler/nhucom/src/NHuComIntracallTable.h"
			],
			[
				"ncty",
				"system/core/include/ncore/NCTypesDefine.h"
			],
			[
				"ncbinderserviceproxy",
				"system/core/ncservice/NCBinderServiceProxy.cpp"
			],
			[
				"nhdeviceproxy",
				"system/handler/nhbase/proxy/NHDeviceProxy.cpp"
			],
			[
				"nideviceproxy",
				"system/handler/nhbase/include/nhbase/NHDeviceProxy.h"
			],
			[
				"niinterfacedef",
				"system/handler/interface/include/nhinterface/NIInterfaceDef.h"
			],
			[
				"parcel",
				"system/core/binder/Parcel.cpp"
			],
			[
				"parcel.h",
				"system/core/include/binder/Parcel.h"
			],
			[
				"ncparcel",
				"system/core/include/ncore/NCParcel.h"
			],
			[
				"nccontentlistener.h",
				"platform/base/ContentProvider/include/contentresolver/NCContentListener.h"
			],
			[
				"ncvariant",
				"system/core/include/ncore/NCVariant.h"
			],
			[
				"ncuri",
				"system/core/include/ncore/NCUri.h"
			],
			[
				"nccursor",
				"platform/base/DBHelper/include/dbhelper/NCCursor.h"
			],
			[
				"ncrunnablequeue",
				"system/core/nceventsys/handler/NCRunnableQueue.cpp"
			],
			[
				"ncrunnablelooper",
				"system/core/include/nceventsys/NCRunnableLooper.h"
			],
			[
				"nihandler",
				"system/handler/interface/include/nhinterface/NIWifiHandler.h"
			],
			[
				"ncevdataif",
				"system/core/include/nceventsys/NCEvDataIF.h"
			],
			[
				"ncservicemanagerdefine",
				"platform/base/ServiceManager/include/servicemanager/NCServiceManagerDefine.h"
			],
			[
				"nainfo",
				"mediatuner/lib/tunerlib/src/NMTunerNAInfo.cpp"
			],
			[
				"nhmedia",
				"system/handler/nhmedia/src/NHMediaHandler.cpp"
			],
			[
				"nmaudiostream",
				"platform/service/AudioService/client/NMAudioStream.cpp"
			],
			[
				"mediainfoprovider/nmmediainfodef.h",
				"platform/service/MediaProvider/include/MediaInfoProvider/NMMediaInfoDEF.h"
			],
			[
				"utils/refbase.h",
				"system/core/include/utils/RefBase.h"
			],
			[
				"android",
				"externals/e2fsprogs/Android.mk"
			],
			[
				"nmsourcelistener",
				"framework/service/media/MediaManager/include/NMSourceListener.h"
			],
			[
				"nmcacheradiolib",
				"mediatuner/lib/CacheRadio/include/NMCacheRadioLib.h"
			],
			[
				"ncthrea",
				"system/core/include/ncore/NCThread.h"
			],
			[
				"ncthread.h",
				"system/core/include/ncore/NCThread.h"
			],
			[
				"nmrunnablelooper",
				"platform/media/mediautils/include/NMRunnableLooper.h"
			],
			[
				"nmsourcemanagerclientapi",
				"framework/service/media/MediaManager/include/NMSourceManagerClientAPI.h"
			],
			[
				"nmtunercommon_def",
				"mediatuner/lib/Common/include/NMTunerCommon_Def.h"
			],
			[
				"nmdisclists",
				"framework/service/media/MediaDisc/DiscLib/ListSearch/NMDiscListSearchRequest.cpp"
			],
			[
				"nmucomlibifdef",
				"platform/media/nmucomparser/uComLib/include/NMuComLibIFDEF.h"
			],
			[
				"ncipcrouterchannel",
				"system/core/nceventsys/channel/NCIpcRouterChannel.cpp"
			],
			[
				"nmtslex",
				"framework/service/media/MediaTsl/Implementation/Api/Extension/NMTslImplExtension.cpp"
			],
			[
				"nmtslse",
				"framework/service/media/MediaTsl/service/NMTslServiceStub.cpp"
			],
			[
				"nmsourcemanagerdef.h",
				"framework/service/media/MediaManager/include/NMSourceManagerDEF.h"
			],
			[
				"nmsxmproxy",
				"framework/service/media/MediaSxm/include/NMSxmProxy.h"
			],
			[
				"nmsxm.pb.h",
				"out/target/product/dcue2/obj/include/NMSxm.pb.h"
			],
			[
				"nmsxm.pb",
				"out/target/product/dcue2/obj/include/NMSxm.pb.h"
			],
			[
				"nctimer",
				"system/core/ncore/Thread/NCTimer.cpp"
			],
			[
				"neavcunit",
				"platform/base/AppFramework/include/evipservice/NEAvcUnit.h"
			],
			[
				"nhmed",
				"system/handler/nhmedia/src/NHMediaHandler.cpp"
			],
			[
				"neipcservice",
				"platform/base/AppFramework/include/evipservice/NEIpcService.h"
			],
			[
				"ncservicebase",
				"system/core/include/ncservice/NCServiceBase.h"
			],
			[
				"ncbinderservice",
				"system/core/include/ncservice/NCBinderService.h"
			],
			[
				"neservicestub",
				"platform/base/AppFramework/include/evipservice/NEServiceStub.h"
			],
			[
				"nitunerstub",
				"framework/api/idl-generated/include/media/stub/NITunerStub.h"
			],
			[
				"ncst",
				"system/core/include/ncore/NCString.h"
			],
			[
				"nmtunerutility",
				"mediatuner/lib/Common/src/NMTunerUtility.cpp"
			],
			[
				"nmtunerparser",
				"tunerparser/src/NMTunerParser.cpp"
			],
			[
				"nhavcprotocoldef",
				"system/handler/avcprotocol/include/NHAvcProtocolDef.h"
			],
			[
				"ndavcradio_generated",
				"out/target/product/e2/obj/include/NDAvcRadio_generated.h"
			],
			[
				"ndavcradio",
				"system/handler/avcprotocol/src/NDAvcRadio.cpp"
			],
			[
				"ndavcprotocoldata_generated",
				"out/target/product/dcue2/obj/include/NDAvcProtocolData_generated.h"
			],
			[
				"nmucom",
				"platform/media/nmucomparser/uComLib/include/NMuComLibIFDEF.h"
			],
			[
				"neserviceproxy",
				"platform/base/AppFramework/include/evip/NEServiceProxy.h"
			],
			[
				"nmsxmproxy.h",
				"framework/service/media/MediaSxm/include/NMSxmProxy.h"
			],
			[
				"nmucoml",
				"platform/media/nmucomparser/uComLib/include/NMuComLibIFDEF.h"
			],
			[
				"nmucomli",
				"platform/media/nmucomparser/uComLib/NMUcomLibIF/NMuComLib.cpp"
			],
			[
				"nmucomlib",
				"platform/media/nmucomparser/uComLib/NMUcomLibIF/NMuComLib.cpp"
			],
			[
				"nmsourcereplier",
				"framework/service/media/MediaManager/include/NMSourceReplier.h"
			],
			[
				"nmtunerservice",
				"mediatuner/TunerService/include/NMTunerService.h"
			],
			[
				"nmsxmtunerproxy",
				"framework/service/media/MediaSxm/include/NMSxmTunerProxy.h"
			],
			[
				"ndavcradio.h",
				"system/handler/avcprotocol/include/NDAvcRadio.h"
			],
			[
				"ncevsyscontext",
				"system/core/include/nceventsys/NCEvSysContext.h"
			],
			[
				"ncsettingeventdefine",
				"platform/service/SettingService/include/settingservice/NCSettingEventDefine.h"
			],
			[
				"ncevent",
				"system/core/include/nceventsys/NCEvent.h"
			],
			[
				"nccontentresolver",
				"platform/base/ContentProvider/include/contentresolver/NCContentResolver.h"
			],
			[
				"nccursor.h",
				"platform/base/DBHelper/include/dbhelper/NCCursor.h"
			],
			[
				"ncsettingeventdefine.h",
				"platform/service/SettingService/include/settingservice/NCSettingEventDefine.h"
			],
			[
				"nmtunerlib",
				"mediatuner/lib/tunerlib/include/NMTunerLib.h"
			],
			[
				"nmsxmtunerreplierimpl",
				"mediatuner/TunerService/src/NMSxmTunerReplierImpl.cpp"
			],
			[
				"pfservicedefine",
				"platform/base/AppFramework/include/system/PfServiceDefine.h"
			],
			[
				"nceventhandler",
				"system/core/include/nceventsys/NCEventHandler.h"
			],
			[
				"/ncsettingeventdefine.h",
				"platform/service/SettingService/include/settingservice/NCSettingEventDefine.h"
			],
			[
				"nmtunerpresetlistcontrol",
				"mediatuner/lib/tunerlib/include/NMTunerPresetListControl.h"
			],
			[
				"nmparserbase",
				"platform/media/nmucomparser/uComLib/include/NMParserBase.h"
			],
			[
				"nhavcunit",
				"system/hallib/nhavcunitlib/include/nhavcunitlib/NHAvcUnit.h"
			],
			[
				"nmtextcodec",
				"platform/media/mediautils/include/NMTextCodec.h"
			],
			[
				"ndavcr",
				"system/handler/avcprotocol/src/NDAvcRadio.cpp"
			],
			[
				"nhavcprotocolmanage",
				"system/handler/avcprotocol/include/NHAvcProtocolManage.h"
			],
			[
				"nhavclandef.h",
				"system/handler/nhavclan/include/nhavclan/NHAvcLanDef.h"
			],
			[
				"nhavcprotocolfunction",
				"system/handler/avcprotocol/include/NHAvcProtocolFunction.h"
			],
			[
				"nhavclandef",
				"system/handler/nhavclan/include/nhavclan/NHAvcLanDef.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/boshin/android/androidCode.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"$$(OBJS-$(1)):"
			],
			[
				"getCurBandType",
				"getCurBandType"
			],
			[
				"requestTunerSourceOn",
				"requestTunerSourceOn"
			],
			[
				"NCSP",
				"nsCreatePBuffer"
			],
			[
				"NCRunnableThread",
				"~NCRunnableThread"
			],
			[
				"dataHandlerLooper",
				"dataHandlerLooper"
			],
			[
				"NMRunnableLooper",
				"NMRunnableLooper"
			],
			[
				"NMSourceListener",
				"NMSOURCELISTENER_H"
			],
			[
				"NMTunerStatus",
				"NMTunerStatusManager"
			],
			[
				"NITunerPlayInfo",
				"NITunerPlayInfo"
			],
			[
				"NMTunerSer",
				"NMTUNERSERVICE_H"
			],
			[
				"NMuc",
				"NMuComLibIF"
			],
			[
				"ncsp",
				"NMSourceManagerClientAPI"
			],
			[
				"NMSourceFBlock",
				"NMSourceFBlock"
			],
			[
				"onReceiveMessage",
				"onReceiveMessage"
			],
			[
				"registerSource",
				"registerSource"
			],
			[
				"NMSourceManagerClientImp",
				"NMSOURCEMANAGERCLIENTIMP_H"
			],
			[
				"NMSourceManagerClientAPI",
				"NMSOURCEMANAGERCLIENTAPI_H"
			],
			[
				"NMSourceManagerDEF",
				"NMSOURCEMANAGERDEF_H"
			],
			[
				"NMSourceReplier",
				"NMSourceReplier"
			],
			[
				"NMuCom_SYS_CmdData",
				"NMuCom_SYS_CmdData"
			],
			[
				"NHMedia",
				"NHMediaHandler"
			],
			[
				"NMuComLibIF",
				"NMuComLibIF"
			],
			[
				"NIIpcServiceHelper",
				"NIIPCSERVICEHELPER_H"
			],
			[
				"NEContext",
				"NEContext"
			],
			[
				"MID_ModuleBase",
				"MID_ModuleBase"
			],
			[
				"getRequest",
				"getRequest"
			],
			[
				"putRequest",
				"putRequest"
			],
			[
				"postRequest",
				"postRequest"
			]
		],
		"width": 696.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
